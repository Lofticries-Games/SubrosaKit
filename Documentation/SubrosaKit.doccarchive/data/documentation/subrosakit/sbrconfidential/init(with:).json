{"kind":"symbol","variants":[{"paths":["\/documentation\/subrosakit\/sbrconfidential\/init(with:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"SubrosaKit"}],"externalID":"s:10SubrosaKit15SBRConfidentialC4withA2C14EncryptionTypeO_tcfc","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO","text":"EncryptionType","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(with:)","symbolKind":"init","platforms":[{"unavailable":false,"introducedAt":"17.0","beta":false,"deprecated":false,"name":"iOS"},{"deprecated":false,"introducedAt":"14.0","name":"macOS","unavailable":false,"beta":false},{"deprecated":false,"unavailable":false,"beta":false,"introducedAt":"17.0","name":"tvOS"},{"beta":false,"name":"watchOS","deprecated":false,"introducedAt":"10.0","unavailable":false},{"deprecated":false,"beta":false,"name":"visionOS","introducedAt":"1.0","unavailable":false}],"roleHeading":"Initializer"},"identifier":{"url":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential\/init(with:)","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/SubrosaKit\/documentation\/SubrosaKit","doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"An initializer that allows you to set the type of encryption from the available list, as well as the key size and\/or hash value."}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"encryptionType","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO","identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential\/EncryptionType","kind":"typeIdentifier","text":"EncryptionType"},{"kind":"text","text":")"}],"platforms":["tvOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"List of available encryption types.","type":"text"}]}],"name":"encryptionType"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"text":"The list of available methods of the SBRConfidential class is not available for all encryption types.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Examples:","type":"text"}],"type":"paragraph"},{"code":["let algorithm = SBRConfidential(with: .sha2(hashValue: .bits256))"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of using AES encryption:"}]},{"syntax":null,"code":["let aes = SBRConfidential(with: .aes(keySize: .bits256))","","let plainText = \"Hello, world!\"","","Task {","    let key = await aes.generateKey()","","    let encryptedData = await aes.encrypt(propertySet: .init(text: plainText, key: key))!","    let decryptedText = await aes.decrypt(propertySet: .init(data: encryptedData, key: key))!","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of using EdDSA encryption:"}]},{"syntax":null,"type":"codeListing","code":["let eddsa = SBRConfidential(with: .eddsa(hashValue: .bits512, keySize: .bits256))","","let dogPlainText = \"woof-woof-woof\"","let catPlainText = \"meow-meow-meow\"","","Task {","    let catKeyPair = await eddsa.generateKeyPair()!","    let dogKeyPair = await eddsa.generateKeyPair()!","","    let salt = await eddsa.generateSalt()!","","    \/\/ Cat's symmetric key","    let catSymmetricKey = await eddsa.generateKey(","        for: .init(","            keyPair: .init(","                privateKey: catKeyPair.privateKey,","                publicKey: dogKeyPair.publicKey!","            ),","            salt: salt","        )","    )","","    \/\/ Dog's symmetric key","    let dogSymmetricKey = await eddsa.generateKey(","        for: .init(","            keyPair: .init(","                privateKey: dogKeyPair.privateKey,","                publicKey: catKeyPair.publicKey!","            ),","            salt: salt","        )","    )","","    print(\"Is cat & dog has the same keys? - \", (catSymmetricKey == dogSymmetricKey) ? \"Yes\" : \"No\") \/\/ Prints \"Yes\"","","    let catEncryptedData = await eddsa.encrypt(propertySet: .init(text: catPlainText, key: catSymmetricKey))!","    let dogEncryptedData = await eddsa.encrypt(propertySet: .init(text: dogPlainText, key: dogSymmetricKey))!","","    let catDecryptedText = await eddsa.decrypt(propertySet: .init(data: dogEncryptedData, key: catSymmetricKey))!","    let dogDecryptedText = await eddsa.decrypt(propertySet: .init(data: catEncryptedData, key: dogSymmetricKey))!","}"]},{"inlineContent":[{"type":"text","text":"An example of using Gamma encryption:"}],"type":"paragraph"},{"syntax":null,"code":["let gamma = SBRConfidential(with: .gamma)","","let plainText = \"Hello, world!\"","","Task {","    let key = await gamma.generateKey()","","    let encryptedData = await gamma.encrypt(propertySet: .init(text: plainText, key: key))!","    let decryptedText = await gamma.decrypt(propertySet: .init(data: encryptedData, key: key))!","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"An example of using SHA-2 encryption:"}],"type":"paragraph"},{"code":["let sha2 = SBRConfidential(with: .sha2(hashValue: .bits512))","","let plainText = \"Hello, world!\"","","Task {","    let encryptedData = await sha2.encrypt(propertySet: .init(text: plainText))!","}"],"syntax":null,"type":"codeListing"},{"type":"aside","style":"note","name":"Authors","content":[{"inlineContent":[{"text":"Dmitry Novikov Â· Lofticries Games","type":"text"}],"type":"paragraph"}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"None","type":"text"}],"type":"paragraph"}],"name":"Bug"}]}],"references":{"doc://SubrosaKit/documentation/SubrosaKit":{"identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit","role":"collection","title":"SubrosaKit","url":"\/documentation\/subrosakit","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"SubrosaKit is an Swift Package written in Swift 5 and designed for ease of use in projects."}]},"doc://SubrosaKit/documentation/SubrosaKit/SBRConfidential/init(with:)":{"url":"\/documentation\/subrosakit\/sbrconfidential\/init(with:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO","kind":"typeIdentifier","text":"EncryptionType"},{"kind":"text","text":")"}],"identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential\/init(with:)","title":"init(with:)","role":"symbol","abstract":[{"text":"An initializer that allows you to set the type of encryption from the available list, as well as the key size and\/or hash value.","type":"text"}],"kind":"symbol"},"doc://SubrosaKit/documentation/SubrosaKit/SBRConfidential/EncryptionType":{"navigatorTitle":[{"kind":"identifier","text":"EncryptionType"}],"url":"\/documentation\/subrosakit\/sbrconfidential\/encryptiontype","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EncryptionType","kind":"identifier"}],"identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential\/EncryptionType","title":"SBRConfidential.EncryptionType","role":"symbol","abstract":[{"type":"text","text":"An enumeration that is a list of available encryption algorithms."}],"kind":"symbol"},"doc://SubrosaKit/documentation/SubrosaKit/SBRConfidential":{"type":"topic","title":"SBRConfidential","kind":"symbol","identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SBRConfidential"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SBRConfidential","kind":"identifier"}],"url":"\/documentation\/subrosakit\/sbrconfidential","abstract":[{"type":"text","text":"A class that implements a set of functionality for encryption and decryption with an available set of encryption algorithms."}]}}}