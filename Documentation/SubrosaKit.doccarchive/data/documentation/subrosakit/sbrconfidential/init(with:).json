{"metadata":{"title":"init(with:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"text":"EncryptionType","kind":"typeIdentifier","preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO"},{"kind":"text","text":")"}],"role":"symbol","externalID":"s:10SubrosaKit15SBRConfidentialC4withA2C14EncryptionTypeO_tcfc","modules":[{"name":"SubrosaKit"}],"roleHeading":"Initializer","symbolKind":"init","platforms":[{"beta":false,"deprecated":false,"name":"iOS","introducedAt":"16.0","unavailable":false},{"name":"macOS","beta":false,"introducedAt":"13.0","deprecated":false,"unavailable":false},{"unavailable":false,"name":"tvOS","beta":false,"introducedAt":"16.0","deprecated":false},{"name":"watchOS","unavailable":false,"deprecated":false,"beta":false,"introducedAt":"9.0"},{"name":"visionOS","beta":false,"introducedAt":"1.0","deprecated":false,"unavailable":false}]},"identifier":{"url":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential\/init(with:)","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/SubrosaKit\/documentation\/SubrosaKit","doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential"]]},"kind":"symbol","abstract":[{"type":"text","text":"An initializer that allows you to set the type of encryption from the available list, as well as the key size and\/or hash value."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"kind":"text","text":"("},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"encryptionType","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"EncryptionType","kind":"typeIdentifier","identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential\/EncryptionType","preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO"},{"text":")","kind":"text"}],"platforms":["iOS"]}]},{"kind":"parameters","parameters":[{"name":"encryptionType","content":[{"type":"paragraph","inlineContent":[{"text":"List of available encryption types.","type":"text"}]}]}]},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"The list of available methods of the SBRConfidential class is not available for all encryption types.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Examples:","type":"text"}]},{"type":"codeListing","code":["let algorithm = SBRConfidential(with: .sha2(hashValue: .bits256))"],"syntax":null},{"inlineContent":[{"type":"text","text":"An example of using AES encryption:"}],"type":"paragraph"},{"syntax":null,"code":["let aes = SBRConfidential(with: .aes(keySize: .bits256))","","let plainText = \"Hello, world!\"","","Task {","    let key = await aes.generateKey()","","    let encryptedData = await aes.encrypt(propertySet: .init(text: plainText, key: key))!","    let decryptedText = await aes.decrypt(propertySet: .init(data: encryptedData, key: key))!","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of using EdDSA encryption:"}]},{"syntax":null,"type":"codeListing","code":["let eddsa = SBRConfidential(with: .eddsa(hashValue: .bits512, keySize: .bits256))","","let dogPlainText = \"woof-woof-woof\"","let catPlainText = \"meow-meow-meow\"","","Task {","    let catKeyPair = await eddsa.generateKeyPair()!","    let dogKeyPair = await eddsa.generateKeyPair()!","","    let salt = await eddsa.generateSalt()!","","    \/\/ Cat's symmetric key","    let catSymmetricKey = await eddsa.generateKey(","        for: .init(","            keyPair: .init(","                privateKey: catKeyPair.privateKey,","                publicKey: dogKeyPair.publicKey!","            ),","            salt: salt","        )","    )","","    \/\/ Dog's symmetric key","    let dogSymmetricKey = await eddsa.generateKey(","        for: .init(","            keyPair: .init(","                privateKey: dogKeyPair.privateKey,","                publicKey: catKeyPair.publicKey!","            ),","            salt: salt","        )","    )","","    print(\"Is cat & dog has the same keys? - \", (catSymmetricKey == dogSymmetricKey) ? \"Yes\" : \"No\") \/\/ Prints \"Yes\"","","    let catEncryptedData = await eddsa.encrypt(propertySet: .init(text: catPlainText, key: catSymmetricKey))!","    let dogEncryptedData = await eddsa.encrypt(propertySet: .init(text: dogPlainText, key: dogSymmetricKey))!","","    let catDecryptedText = await eddsa.decrypt(propertySet: .init(data: dogEncryptedData, key: catSymmetricKey))!","    let dogDecryptedText = await eddsa.decrypt(propertySet: .init(data: catEncryptedData, key: dogSymmetricKey))!","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of using SHA-2 encryption:"}]},{"syntax":null,"code":["let sha2 = SBRConfidential(with: .sha2(hashValue: .bits512))","","let plainText = \"Hello, world!\"","","Task {","    let encryptedData = await sha2.encrypt(propertySet: .init(text: plainText))!","}"],"type":"codeListing"},{"name":"Authors","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Dmitry Novikov Â· Lofticries Games","type":"text"}]}],"style":"note"},{"style":"note","type":"aside","name":"Bug","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"None"}]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/subrosakit\/sbrconfidential\/init(with:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SubrosaKit/documentation/SubrosaKit/SBRConfidential/init(with:)":{"url":"\/documentation\/subrosakit\/sbrconfidential\/init(with:)","type":"topic","kind":"symbol","identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential\/init(with:)","role":"symbol","abstract":[{"text":"An initializer that allows you to set the type of encryption from the available list, as well as the key size and\/or hash value.","type":"text"}],"title":"init(with:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"EncryptionType","preciseIdentifier":"s:10SubrosaKit15SBRConfidentialC14EncryptionTypeO"},{"kind":"text","text":")"}]},"doc://SubrosaKit/documentation/SubrosaKit/SBRConfidential/EncryptionType":{"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential\/EncryptionType","navigatorTitle":[{"text":"EncryptionType","kind":"identifier"}],"abstract":[{"text":"An enumeration that is a list of available encryption algorithms.","type":"text"}],"title":"SBRConfidential.EncryptionType","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EncryptionType","kind":"identifier"}],"url":"\/documentation\/subrosakit\/sbrconfidential\/encryptiontype"},"doc://SubrosaKit/documentation/SubrosaKit/SBRConfidential":{"abstract":[{"text":"A class that implements a set of functionality for encryption and decryption with an available set of encryption algorithms.","type":"text"}],"type":"topic","kind":"symbol","title":"SBRConfidential","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"SBRConfidential","kind":"identifier"}],"navigatorTitle":[{"text":"SBRConfidential","kind":"identifier"}],"identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit\/SBRConfidential","url":"\/documentation\/subrosakit\/sbrconfidential","role":"symbol"},"doc://SubrosaKit/documentation/SubrosaKit":{"title":"SubrosaKit","identifier":"doc:\/\/SubrosaKit\/documentation\/SubrosaKit","url":"\/documentation\/subrosakit","kind":"symbol","type":"topic","abstract":[{"text":"SubrosaKit is a simple and easy way to start encrypting data in your app.","type":"text"}],"role":"collection"}}}